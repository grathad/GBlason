using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;

namespace GBlason.Common.CustomCommand
{
    /// <summary>
    /// Handle the list of command (for a givn object / target) and the tools related
    /// </summary>
    public class CommandRepository
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommandRepository"/> class.
        /// Instanciate an empty command list
        /// </summary>
        public CommandRepository()
        {
            CommandHistory = new ObservableCollection<CommandGeneric>();
            LastSavedCommand = null;
        }

        /// <summary>
        /// Gets the command history.
        /// </summary>
        public ObservableCollection<CommandGeneric> CommandHistory { get; private set; }

        /// <summary>
        /// Gets or sets the last saved command.
        /// Used to know if the file have to be saved or if it is already the case.
        /// Null when no commands or no save (initialisation) have to be set when a saving is done
        /// </summary>
        /// <value>
        /// The last saved command.
        /// </value>
        public CommandGeneric LastSavedCommand { get; set; }

        /// <summary>
        /// Gets a value indicating whether this instance has undoable command.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if this instance has undoable command; otherwise, <c>false</c>.
        /// </value>
        public  bool HasUndoableCommand
        {
            get { return CommandHistory.Any(cm => cm.Done); }
        }

        /// <summary>
        /// Gets a value indicating whether this instance has redoable command.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if this instance has redoable command; otherwise, <c>false</c>.
        /// </value>
        public bool HasRedoableCommand
        {
            get { return CommandHistory.Any(cm => !cm.Done); }
        }

        /// <summary>
        /// Gets the last undoable command.
        /// </summary>
        public CommandGeneric LastUndoableCommand
        {
            get { return CommandHistory.LastOrDefault(cm => cm.Done); }
        }

        /// <summary>
        /// Gets the last redoable command.
        /// </summary>
        public CommandGeneric FirstRedoableCommand
        {
            get { return CommandHistory.FirstOrDefault(cm => !cm.Done); }
        }

        /// <summary>
        /// Undoes the commands until the target to undo (from the last action).
        /// </summary>
        /// <param name="targetToUndo">The target to undo.</param>
        public void UndoCommandsUntil(CommandGeneric targetToUndo)
        {
            foreach (var com in CommandHistory.Reverse())
            {
                if(com.Done)
                    com.Undo();   
                if (com == targetToUndo)
                {
                    break;
                }
            }
        }

        public void RedoCommandsUntil(CommandGeneric targetToRedo)
        {
            foreach (var com in CommandHistory)
            {
                if(!com.Done)
                    com.Redo();
                if (com == targetToRedo)
                {
                    break;
                }
            }
        }
    }
}
