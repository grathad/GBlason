using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using GBlason.Common.CustomCommand;
using GBlason.ViewModel;

namespace GBlason.Control.Aggregate
{
    /// <summary>
    /// Interaction logic for ActionHistory.xaml
    /// </summary>
    public partial class ActionHistory : UserControl
    {
        public ActionHistory()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Commands the undo can execute.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="System.Windows.Input.CanExecuteRoutedEventArgs"/> instance containing the event data.</param>
        private void CommandUndoCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (GlobalApplicationViewModel.GetApplicationViewModel.CurrentlyDisplayedFile != null)
                e.CanExecute = CommandHistoryDataGrid.SelectedItem == null ? GlobalApplicationViewModel.GetApplicationViewModel.CurrentlyDisplayedFile.CommandsApplied.HasUndoableCommand : ((CommandGeneric)CommandHistoryDataGrid.SelectedItem).Done;
            else
                e.CanExecute = false;
        }

        /// <summary>
        /// Commands the undo executed.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        private void CommandUndoExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            var command = CommandHistoryDataGrid.SelectedItem == null
                              ? GlobalApplicationViewModel.GetApplicationViewModel.CurrentlyDisplayedFile.CommandsApplied.LastUndoableCommand
                              : CommandHistoryDataGrid.SelectedItem as CommandGeneric;
            if (command != null)
            {
                //for all the command from the last to the selected (command) we undo
                GlobalApplicationViewModel.GetApplicationViewModel.CurrentlyDisplayedFile.CommandsApplied.UndoCommandsUntil(command);
            }
        }

        /// <summary>
        /// Check if the redo is possible
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="System.Windows.Input.CanExecuteRoutedEventArgs"/> instance containing the event data.</param>
        private void CommandRedoCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (GlobalApplicationViewModel.GetApplicationViewModel.CurrentlyDisplayedFile != null)
                e.CanExecute = CommandHistoryDataGrid.SelectedItem == null ? GlobalApplicationViewModel.GetApplicationViewModel.CurrentlyDisplayedFile.CommandsApplied.HasRedoableCommand : (!((CommandGeneric)CommandHistoryDataGrid.SelectedItem).Done);
            else
            {
                e.CanExecute = false;
            }
        }

        /// <summary>
        /// Execute the redo on the command
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        private void CommandRedoExecuted(object sender, ExecutedRoutedEventArgs e)
        {
            var command = CommandHistoryDataGrid.SelectedItem == null
                             ? GlobalApplicationViewModel.GetApplicationViewModel.CurrentlyDisplayedFile.CommandsApplied.FirstRedoableCommand
                             : CommandHistoryDataGrid.SelectedItem as CommandGeneric;
            if (command != null)
            {
                //for all the command from the last to the selected (command) we undo
                GlobalApplicationViewModel.GetApplicationViewModel.CurrentlyDisplayedFile.CommandsApplied.RedoCommandsUntil(command);
            }
        }
    }
}
