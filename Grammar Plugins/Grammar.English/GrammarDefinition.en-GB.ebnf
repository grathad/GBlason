Shield =  Field | (Field , [FieldSeparator] , Charge , [AllCounterChanged] , [Cadency] );

Field = Tincture | Division | FieldVariation;


(* Field Variation region *)

FieldVariation = FieldVariation2Tinctures | FieldVariationSemy | FieldVariationKnownSemy;

FieldVariation2Tinctures =  FieldVariationName , [Orientation] , [Of , FieldVariationNumber] , Tincture , And , Tincture 
                            | Tincture , FieldVariationName , [Orientation] , Tincture;

FieldVariationKnownSemy = SimpleTincture , PredefinedSemy;

FieldVariationSemy = SimpleTincture , (( [SemyDeterminer] , Semy , SemyCharge) | SemyName);

SemyCharge = (Ordinary | Symbol | TokenNames.SymbolCross) [SimpleTincture] ;


(* Tinctures region *)

Tincture = SimpleTincture | TinctureFur | CounterChanged;

SimpleTincture = TinctureColour | TinctureMetal | TinctureReference | TinctureProper;
TinctureFur = SimpleFur | Vair | Vaire;
Vair = [Counter] , VairName , [([SymbolStateDeterminer] , FurOrientationName)];
Vaire = [Counter] , VaireName , [([SymbolStateDeterminer] , FurOrientationName)] , SimpleTincture , And , SimpleTincture 
        | SimpleTincture , VaireBetweenName , SimpleTincture;


(* Division region *)

Division = DivisionBy2 | DivisionBy3 | DivisionBy4 | ComplexDivision;

DivisionBy2 = DivisionBy2Name , [LightSeparator] , [LineVariationDefinition] , (SimpleDivisionBy2Field | SimpleDivisionShield | PositionedHalves);
LineVariationDefinition = LineVariation , [Counter , LineVariation];
SimpleDivisionBy2Field = (Tincture | FieldVariation) , And , (Tincture | FieldVariation);
SimpleDivisionShield = Shield , [LightSeparator] , And , Shield;
PositionedHalves = FirstDivisionNumber , Shield , [DivisionSeparator] , SecondDivisionNumber , Shield;

DivisionBy3 = DivisionBy3Name , [LightSeparator] , [LineVariationDefinition] , SimpleDivisionBy3Field;
SimpleDivisionBy3Field = (Tincture | FieldVariation) , LightSeparator , (Tincture | FieldVariation) , And , (Tincture | FieldVariation);

DivisionBy4 = DivisionBy4Name , [DivisionBy4Separator] , [LineVariationDefinition] , (SimpleDivisionBy2Field | SimpleDivisionShield | PositionedQuarters);
PositionedQuarters = All4QuarterPositioned | FirstAndFourthThenSecondAndThird | FirstAndFourthThenAllPositioned | SecondAndThirdThenAllPositioned;

All4QuarterPositioned = FirstDivisionNumber , [Quarter] , Shield , DivisionSeparator , 
                        SecondDivisionNumber , [Quarter] , Shield , DivisionSeparator ,
                        ThirdDivisionNumber , [Quarter] , Shield , DivisionSeparator ,
                        FourthDivisionNumber , [Quarter] , Shield , [Separator];
FirstAndFourthThenSecondAndThird =  FirstAndFourthDivisionNumber , [Quarter] , Shield , DivisionSeparator , 
                                    SecondAndThirdDivisionNumber , [Quarter] , Shield , [Separator];
FirstAndFourthThenAllPositioned =   FirstAndFourthDivisionNumber , [Quarter] , Shield , DivisionSeparator ,
                                    SecondDivisionNumber , [Quarter] , Shield , DivisionSeparator , 
                                    ThirdDivisionNumber , [Quarter] , Shield , [Separator];
SecondAndThirdThenAllPositioned =   FirstDivisionNumber , [Quarter] , Shield , DivisionSeparator , 
                                    SecondAndThirdDivisionNumber , [Quarter] , Shield , DivisionSeparator ,
                                    FourthDivisionNumber , [Quarter] , Shield , [Separator];


(* Charge region *)

Charge = (SimpleCharge | LocatedSimpleCharge | MultiCharges) , [LightSeparator] ;
SimpleCharge = SingleSimpleCharge | PluralSimpleCharge;
SingleSimpleCharge = SingleDeterminer , SingleChargeElement , (Tincture | FieldVariation);
PluralSimpleCharge = PluralDeterminer , PluralChargeElement , 
                    ( ([(Tincture | FieldVariation)] , SharedProperties) |
                    ([SharedProperties] , ( Tincture | FieldVariation )) );

SingleChargeElement = SingleOrdinary | Symbol | SymbolCross;
(* Need rework to differentiate the single and plural shares and assign it to the correct grammar rule *)
SharedProperties = [SharedKeyword] , [{SharedObjectReference | SharedPropertyAdverb}] , {Direction};


MultiCharges= ChargesList | ChargeBetweenPosition | ChargeOnPosition | ChargeWithin | ChargeSurmounted | ChargeOverall  | ChargeCharged ;

(*
ChargesList= AndPossibleGroup , ( [{Separator , AndPossibleGroup}] , And , AndPossibleGroup)
This one has to be customized AS the and possible group actually can be either a and possible located group, or just another complex charge compatible.
But there is a specific rule, that for valid grammar, at best only one of them can be non located (and possibly they can all be located)
*)
AndPossibleGroup = SimpleCharge | ChargeOnPosition | ChargeBetweenPosition | ChargeCharged;
AndLocatedPossibleGroup = LocatedSimpleCharge | ChargeOnPosition | ChargeBetweenPosition | ChargeCharged ;
LocatedSimpleCharge = (Location , SimpleCharge) | (SimpleCharge , Location) | ImpliedLocationOrdinary;
(* Location = ;
ImpliedLocationOrdinary =; *)

ChargeBetweenPosition = BetweenMiddle | BetweenStart;
BetweenMiddle = BetweenInsideGroup , [LightSeparator] , Between , BetweenSurroundingGroup , [{ Between , BetweenSurroundingGroup }] ;
BetweenStart = Between , BetweenSurroundingGroup , BetweenInsideGroup ;
BetweenInsideGroup = SimpleCharge | ChargesList | ChargeSurmounted | ChargeCharged;
BetweenSurroundingGroup = PluralSimpleCharge | ChargesList | SurmountedPlural | ChargeCharged;

ChargeOnPosition= OnStart | OnMiddle;
OnMiddle = ( SimpleCharge | Division ) , On , OnPossibleGroup;
OnStart= On , OnPossibleGroup , [LightSeparator] , OnPossibleGroup;
OnPossibleGroup=SimpleCharge | ChargeBetweenPosition | ChargeSurmounted | ChargeCharged;

ChargeWithin = WithinWhole | WithinAll | WithinAllWhole;
WithinWhole = WithinInsideGroup , [ChargesList | Whole] , Within , WithinOutsideGroup;
WithinAll = WithinInsideGroup , Within , WithinOutsideGroup , All , Within , WithinOutsideGroup; 
WithinAllWhole = WithinInsideGroup , All , Within , WithinOutsideGroup , Whole , WithinOutsideGroup;
WithinInsideGroup = SimpleCharge | ChargesList | ChargeBetweenPosition | ChargeSurmounted | ChargeCharged | ChargeOnPosition;
WithinOutsideGroup = SimpleCharge | ChargesList | ChargeCharged;

ChargeSurmounted = SurmountedSingle | SurmountedPlural;
SurmountedSingle = SurmountedUnderSingleGroup , Surmounted , SurmountedOverGroup;
SurmountedPlural = SurmountedUnderPluralGroup , Each , Surmounted , SurmountedOverGroup;
SurmountedUnderSingleGroup = SingleSimpleCharge | SingleCharged;
SurmountedUnderPluralGroup = PluralSimpleCharge | PluralCharged;
SurmountedOverGroup = SimpleCharge | BetweenMiddle | ChargeCharged;

ChargeOverall = OverallUnderGroup , Overall , OverallOverGroup;
OverallUnderGroup = ChargesList | ChargeBetweenPosition | ChargeOnPosition | ChargeWithin | ChargeSurmounted | ChargeCharged | SimpleCharge | DivisionOfTheField;
OverallOverGroup = SimpleCharge | ChargeOnPosition | ChargeCharged;

ChargeCharged = SingleSimpleCharge , Charged , ChargedOverGroup | PluralSimpleCharge , Each , Charged , ChargedOverGroup;
ChargedOverGroup = SimpleCharge | ChargesList | BetweenMiddle | ChargeSurmounted;


